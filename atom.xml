<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>落秋</title>
  
  <subtitle>博观而约取，厚积而薄发。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.liyb.vip/"/>
  <updated>2020-09-10T11:26:31.879Z</updated>
  <id>https://www.liyb.vip/</id>
  
  <author>
    <name>落秋</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>将MacOS App打包成dmg</title>
    <link href="https://www.liyb.vip/2020/09/10/%E5%B0%86MacOS%20App%E6%89%93%E5%8C%85%E6%88%90dmg/"/>
    <id>https://www.liyb.vip/2020/09/10/将MacOS App打包成dmg/</id>
    <published>2020-09-09T16:00:00.000Z</published>
    <updated>2020-09-10T11:26:31.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li><p>Xcode打包导出App</p><p><img src="/resource/dmg/导出App.png" style="zoom:33%;"></p></li><li><p>右键导出的app，<code>显示包内容</code>=&gt;<code>Contents</code>=&gt;<code>Resources</code>，里面的AppIcon.icns就是我们需要的app图标，复制出来与app放一起备用。</p></li><li><p>制作精美的dmg，肯定需要一张好看的背景图；这是我粗略制作的一张背景图。</p><p><img src="/resource/dmg/背景.png" style="zoom:33%;"></p></li></ol><h1 id="创建dmg"><a href="#创建dmg" class="headerlink" title="创建dmg"></a>创建dmg</h1><ol><li><p>打开磁盘工具应用，点击菜单栏<code>文件</code>=&gt;<code>新建映像</code>=&gt;<code>空白映像</code>，然后按下图填写完，点击<code>存储</code>即可。</p><p><img src="/resource/dmg/创建dmg.png" style="zoom:33%;"></p><p>注：名称按自己需求填写；</p><p>​        其中大小根据准备的文件总大小大一点填写，防止导入文件提示磁盘空间不足。</p></li><li><p>创建完成，会在选择的位置生成<code>iSWaller.dmg</code>文件和<code>iSWaller</code>，右键<code>iSWaller</code>显示简介，会打开下图，然后把准备的icns图标拖放到下图红框处进行图标替换。</p><p><img src="/resource/dmg/更换图标.png" style="zoom:33%;"></p></li><li><p>双击<code>iSWaller</code>，进入文件夹，把我们准备的icns图标、app、图标拖放进来。然后右键查看显示选项，如下图进行选择，把准备的背景图拖放到下面的图像选择框中，完成后就可以看到<code>iSWaller</code>更换了背景图。</p><p><img src="/resource/dmg/查看选项.png" style="zoom:33%;"></p></li><li><p>这时是不是感觉跟别的dmg相比少了个Application替身；打开终端执行以下命令生成Application替身</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /Volumes/dmg文件名</span><br><span class="line"><span class="meta">$</span> ln -s /Applications Applications</span><br></pre></td></tr></table></figure><p>再次查看发现，确实出现了Application替身，但是图标和背景有点影响观感，用以下命令隐藏它们。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> chflags hidden 背景图名称(带后缀名)</span><br><span class="line"><span class="meta">$</span> chflags hidden icns图标名称(带后缀名)</span><br></pre></td></tr></table></figure><p>最后把app和Application拖放到合适的位置即可。</p><p>下图是制作完成效果</p><p><img src="/resource/dmg/效果.png" style="zoom:33%;"></p></li></ol><h1 id="转换dmg"><a href="#转换dmg" class="headerlink" title="转换dmg"></a>转换dmg</h1><p>打开磁盘工具点击菜单栏<code>映像</code>=&gt;<code>转换</code>，选择刚才dmg文件，命名后点击转换即可；这样就算完成我们的打包了，赶紧打包一个发给你们的小伙伴吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Xcode打包导出App&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/resource/dmg/导出App.png
      
    
    </summary>
    
      <category term="MacOS" scheme="https://www.liyb.vip/categories/MacOS/"/>
    
    
      <category term="dmg" scheme="https://www.liyb.vip/tags/dmg/"/>
    
  </entry>
  
  <entry>
    <title>记一次MacOS CPU占用90%-100%</title>
    <link href="https://www.liyb.vip/2020/08/27/%E8%AE%B0%E4%B8%80%E6%AC%A1MacOS-CPU%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://www.liyb.vip/2020/08/27/记一次MacOS-CPU占用过高的问题/</id>
    <published>2020-08-27T07:12:16.302Z</published>
    <updated>2020-08-27T07:48:36.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近两天突然发现我本突然掉电很快，早上来公司100%的电量，还没12点电量就剩30%-40%了，第一天也没注意，只是想着电池可能不行了。第二天又发现了这个掉电的问题，就查看了电池性能，显示的正常，这时候我就有点纳闷了，又从软件上看了风扇的转速居然达到了将近4000，一直居高不下，这是就感觉问题有点严重了，就打开了活动检测器总于发现了罪魁祸首一个名叫<code>usernoted</code>的进程一直占用CPU资源，一直活跃在90%-100%之间。</p><h1 id="usernoted进程"><a href="#usernoted进程" class="headerlink" title="usernoted进程"></a>usernoted进程</h1><p>这个进程是负责MacOS系统中通知服务，所以手动杀死这进程是无用，杀死后还会自动重启。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>google搜索好多解决方案，但都是老方案，其中有篇说是要删除<code>~/Library/Application Support/NotificationCenter/com.apple.notificationcenter</code>文件夹，但是我在<code>Application Support</code>文件夹下并未发现<code>NotificationCenter</code>文件夹。这是因为MacOS 10.10之后苹果修改此文件夹的路径。修改后的路径为<code>/private/var/folders/_q/b4sbtpzx6hlgq43xgm5fdhhr0000gn/0/com.apple.notificationcenter</code>。</p><p>进入此文件夹下我们会发现里面有两个文件夹，打开名叫<code>db2</code>的文件夹，把里面的所有文件删除，然后在杀死<code>usernoted</code>即可解决此问题。</p><h1 id="查看资料"><a href="#查看资料" class="headerlink" title="查看资料"></a>查看资料</h1><p><a href="https://apple.stackexchange.com/questions/212970/what-is-usernoted-and-why-is-it-eating-my-cpu" target="_blank" rel="noopener">What is “usernoted” and why is it eating my CPU?</a></p><p><a href="https://apple.stackexchange.com/questions/64629/does-the-os-x-log-notifications-from-the-notification-center" target="_blank" rel="noopener">Does the OS X log notifications from the Notification Center?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近两天突然发现我本突然掉电很快，早上来公司100%的电量，还没12点电量就剩30%-40%了，第一天也没注意，只是想着电池可能不行了。第二
      
    
    </summary>
    
      <category term="MacOS" scheme="https://www.liyb.vip/categories/MacOS/"/>
    
    
      <category term="CPU" scheme="https://www.liyb.vip/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>MacOS开发-NSCollectionView使用</title>
    <link href="https://www.liyb.vip/2019/09/15/MacOS%E5%BC%80%E5%8F%91-NSCollectionView%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.liyb.vip/2019/09/15/MacOS开发-NSCollectionView使用/</id>
    <published>2019-09-15T06:09:14.159Z</published>
    <updated>2019-09-15T07:38:07.063Z</updated>
    
    <content type="html"><![CDATA[<p>在iOS开发中，我们经常会用到UITableView和UICollectionView两种控件进行开发，在MacOS中也有相对应的NSTableView和NSCollectionView，今天在这里记录下NSCollectionView的使用。</p><h1 id="创建NSCollectionView"><a href="#创建NSCollectionView" class="headerlink" title="创建NSCollectionView"></a>创建NSCollectionView</h1><h2 id="xib拖拽"><a href="#xib拖拽" class="headerlink" title="xib拖拽"></a>xib拖拽</h2><p>创建项目工程打开Main.storyboard或Main.xib</p><p><img src="/resource/NSCollectionView/collectionView.png" alt></p><p><img src="/resource/NSCollectionView/layout.png" alt></p><p><img src="/resource/NSCollectionView/createCollectionView.png" alt></p><p><img src="/resource/NSCollectionView/item.png" alt></p><p><img src="/resource/NSCollectionView/label.png" alt></p><p>然后编写以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    self.collectionView.dataSource = self;</span><br><span class="line">    [self.collectionView registerClass:[CollectionViewItem class] forItemWithIdentifier:@&quot;item&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSInteger)collectionView:(NSCollectionView *)collectionView numberOfItemsInSection:(NSInteger)section &#123;</span><br><span class="line">    return 30;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSCollectionViewItem *)collectionView:(NSCollectionView *)collectionView itemForRepresentedObjectAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class="line">    CollectionViewItem *item = [collectionView makeItemWithIdentifier:@&quot;item&quot; forIndexPath:indexPath];</span><br><span class="line">    item.textLabel.stringValue = [NSString stringWithFormat:@&quot;第%zi个&quot;, indexPath.item];</span><br><span class="line">    return item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序查看</p><p><img src="/resource/NSCollectionView/result.png" alt></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 替换viewDidLoad</span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    NSCollectionView *collectionView = [[NSCollectionView alloc] initWithFrame:self.view.bounds];</span><br><span class="line">    NSCollectionViewFlowLayout *layout = [[NSCollectionViewFlowLayout alloc] init];</span><br><span class="line">    layout.minimumLineSpacing = 0;</span><br><span class="line">    layout.minimumInteritemSpacing = 0;</span><br><span class="line">    layout.itemSize = CGSizeMake(60, 60);</span><br><span class="line">    collectionView.collectionViewLayout = layout;</span><br><span class="line">    collectionView.dataSource = self;</span><br><span class="line">    [collectionView registerClass:[CollectionViewItem class] forItemWithIdentifier:@&quot;item&quot;];</span><br><span class="line">    </span><br><span class="line">    NSClipView *clip = [[NSClipView alloc] initWithFrame:self.view.bounds];</span><br><span class="line">    clip.documentView = collectionView;</span><br><span class="line">    </span><br><span class="line">    NSScrollView *scrollView = [[NSScrollView alloc] initWithFrame:self.view.bounds];</span><br><span class="line">    scrollView.contentView = clip;</span><br><span class="line">    </span><br><span class="line">    [self.view addSubview:scrollView];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="NSCollectionView与UICollectionView的区别"><a href="#NSCollectionView与UICollectionView的区别" class="headerlink" title="NSCollectionView与UICollectionView的区别"></a>NSCollectionView与UICollectionView的区别</h1><p>相同点:</p><ul><li>都是使用collectionViewLayout对cell的布局</li><li>基本属性大都相同，偶尔会有些属性名不一致的问题</li></ul><p>不同点:</p><ul><li>NSCollectionView继承NSView，使用时需要与NSScrollView和NSClipVIew进行组合使用</li><li>NSCollectionView缺少一些组合方法，如果未找到与UICollectionView相同的方法，可以尝试单独给参数赋值来实现。</li><li>NSCollectionViewItem继承NSViewController</li></ul><h1 id="NSCollectionView使用时的一些坑"><a href="#NSCollectionView使用时的一些坑" class="headerlink" title="NSCollectionView使用时的一些坑"></a>NSCollectionView使用时的一些坑</h1><ul><li>创建自定义item时需要勾选<code>xib</code>选项，然后在注册item进复用池时，如果按UICollectionView使用时应该使用<code>nib</code>的方式注册item，运行时程序崩了，你会发现从复用池中获取的item是nil。</li><li>在代理方法中未能找到相关选中的方法，只有一个<code>- (void)collectionView:(NSCollectionView *)collectionView didSelectItemsAtIndexPaths:(NSSet&lt;NSIndexPath *&gt; *)indexPaths</code>很像的方法，实现之后，发现点击item并不调用此方法。我想到的实现方式是在item中监听鼠标点击事件。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在iOS开发中，我们经常会用到UITableView和UICollectionView两种控件进行开发，在MacOS中也有相对应的NSTableView和NSCollectionView，今天在这里记录下NSCollectionView的使用。&lt;/p&gt;
&lt;h1 id=&quot;创建
      
    
    </summary>
    
      <category term="MacOS" scheme="https://www.liyb.vip/categories/MacOS/"/>
    
    
      <category term="MacOS" scheme="https://www.liyb.vip/tags/MacOS/"/>
    
      <category term="NSCollectionView" scheme="https://www.liyb.vip/tags/NSCollectionView/"/>
    
  </entry>
  
  <entry>
    <title>MacOS开发-状态栏APP和Popover弹出窗口</title>
    <link href="https://www.liyb.vip/2019/09/14/MacOS%E5%BC%80%E5%8F%91-%E7%8A%B6%E6%80%81%E6%A0%8FAPP%E5%92%8CPopover%E5%BC%B9%E5%87%BA%E7%AA%97%E5%8F%A3/"/>
    <id>https://www.liyb.vip/2019/09/14/MacOS开发-状态栏APP和Popover弹出窗口/</id>
    <published>2019-09-14T08:58:56.156Z</published>
    <updated>2019-09-15T06:40:34.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发目的"><a href="#开发目的" class="headerlink" title="开发目的"></a>开发目的</h1><p>本人再使用<a href="https://paper.meiyuan.in/" target="_blank" rel="noopener">pap.er</a>时发现了一些bug,偶尔还会莫名崩溃，所以想要自己开发一款类似的一款壁纸APP。</p><p>以下是我开发这款APP的记录。</p><h1 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h1><p><img src="/resource/StatusBar/创建MacOS工程.png" alt="创建MacOS工程"></p><p>打开MainMenu.xib文件，因为我们是状态栏APP，所以需要删除默认的Window和Main Menu</p><p><img src="/resource/StatusBar/MainMenu.png" alt="MainMenu"></p><h2 id="设置状态栏"><a href="#设置状态栏" class="headerlink" title="设置状态栏"></a>设置状态栏</h2><p>在AppDelegate文件中编写以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (void)applicationDidFinishLaunching:(NSNotification *)aNotification &#123;</span><br><span class="line">    NSStatusItem *statusItem = [[NSStatusBar systemStatusBar] statusItemWithLength: 20];</span><br><span class="line">    NSImage *icon = [NSImage imageNamed:@&quot;statusBar&quot;];</span><br><span class="line">    icon.template = YES;</span><br><span class="line">    statusItem.image = icon;</span><br><span class="line">    statusItem.button.target = self;</span><br><span class="line">    statusItem.button.action = @selector(toggleMenu:);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)toggleMenu:(NSStatusBarButton *)button &#123;</span><br><span class="line">    NSLog(@&quot;点击菜单&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/resource/StatusBar/显示图标.png" alt></p><p>此时我们已经能在状态栏看到我们APP显示了，但是你会发现Dock栏里面也有我们的APP的Icon，这是我们需要在info.plist文件中设置<code>Application is agent (UIElement)</code>为<code>YES</code>，再次运行APP即可。</p><h1 id="Popver弹出窗口"><a href="#Popver弹出窗口" class="headerlink" title="Popver弹出窗口"></a>Popver弹出窗口</h1><p>再次打开AppDelegate文件，编写以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 添加popover属性</span><br><span class="line">- (NSPopover *)popover &#123;</span><br><span class="line">    if (!_popover) &#123;</span><br><span class="line">        _popover = [[NSPopover alloc] init];</span><br><span class="line">        _popover.appearance = [[NSAppearance alloc] initWithAppearanceNamed:NSAppearanceNameVibrantDark bundle:nil];</span><br><span class="line">      // 创建一个继承NSViewController的PopoverController作为弹出控制器</span><br><span class="line">        _popover.contentViewController = [[PopoverController alloc] init];</span><br><span class="line">        _popover.behavior = NSPopoverBehaviorApplicationDefined;</span><br><span class="line">    &#125;</span><br><span class="line">    return _popover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 修改toggleMenu:方法</span><br><span class="line">- (void)toggleMenu:(NSStatusBarButton *)button &#123;</span><br><span class="line">    if ([self.popover isShown]) &#123;</span><br><span class="line">        [self.popover performClose:button];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [self.popover showRelativeToRect:button.bounds ofView:button preferredEdge:NSRectEdgeMaxY];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/resource/StatusBar/popover.png" alt="popover"></p><p>此时你会发现点击弹窗外不会自动收起，这种效果不是我们想要的效果，查看<code>NSpopover</code>的API文档，其有一个<code>behavior</code>属性，值为<code>NSPopoverBehaviorTransient</code>好像可以实现自动收起功能。运行程序发现确实可以实现点击弹窗外面自动收起功能，但是前提是弹窗内有一次点击时间才能做到此效果。</p><p>此时我的内心是崩溃的😤，谷歌、百度其上，终于让我找到了解决方案：添加系统事件监视器来实现对交互事件的监测，从而做到弹窗显示后，无论什么时候点击弹窗外面都能自动收起。</p><p>新建<code>EventMonitor</code>，编写以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// EventMonitor.h</span><br><span class="line">typedef void(^EventMonitorHandler) (NSEvent * _Nullable event);</span><br><span class="line">@interface EventMonitor : NSObject</span><br><span class="line">- (instancetype)initWithMask:(NSEventMask)mask handler:(EventMonitorHandler)handler;</span><br><span class="line">- (void)start;</span><br><span class="line">- (void)stop;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// EventMonitor.m</span><br><span class="line">@interface EventMonitor ()</span><br><span class="line">@property (nonatomic, assign) NSEventMask mask;</span><br><span class="line">@property (nonatomic, copy) EventMonitorHandler handler;</span><br><span class="line">@property (nonatomic, strong) id monitor;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation EventMonitor</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithMask:(NSEventMask)mask handler:(EventMonitorHandler)handler &#123;</span><br><span class="line">    if (self = [super init]) &#123;</span><br><span class="line">        self.mask = mask;</span><br><span class="line">        self.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)start &#123;</span><br><span class="line">    self.monitor = [NSEvent addGlobalMonitorForEventsMatchingMask:self.mask handler:self.handler];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)stop &#123;</span><br><span class="line">    if (self.monitor != nil) &#123;</span><br><span class="line">        [NSEvent removeMonitor:self.monitor];</span><br><span class="line">        self.monitor = nil;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>打开AppDelegate，修改Popover弹出事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// applicationDidFinishLaunching:方法添加</span><br><span class="line">__weak typeof(self) weakSelf = self;</span><br><span class="line">self.monitor = [[EventMonitor alloc] initWithMask:NSEventMaskLeftMouseDown | NSEventMaskRightMouseDown handler:^(NSEvent * _Nullable event) &#123;</span><br><span class="line">    if (weakSelf.popover.shown) &#123;</span><br><span class="line">        [weakSelf.popover performClose:event];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 修改toggleMenu:方法如下</span><br><span class="line">- (void)toggleMenu:(NSStatusBarButton *)button &#123;</span><br><span class="line">    if ([self.popover isShown]) &#123;</span><br><span class="line">        [self.popover performClose:button];</span><br><span class="line">        [self.monitor stop];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [self.popover showRelativeToRect:button.bounds ofView:button preferredEdge:NSRectEdgeMaxY];</span><br><span class="line">        [self.monitor start];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行程序，已经可以实现我们想要的功能了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开发目的&quot;&gt;&lt;a href=&quot;#开发目的&quot; class=&quot;headerlink&quot; title=&quot;开发目的&quot;&gt;&lt;/a&gt;开发目的&lt;/h1&gt;&lt;p&gt;本人再使用&lt;a href=&quot;https://paper.meiyuan.in/&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
      <category term="MacOS" scheme="https://www.liyb.vip/categories/MacOS/"/>
    
    
      <category term="MacOS" scheme="https://www.liyb.vip/tags/MacOS/"/>
    
      <category term="Popover" scheme="https://www.liyb.vip/tags/Popover/"/>
    
  </entry>
  
  <entry>
    <title>视频提取音频和音频裁剪</title>
    <link href="https://www.liyb.vip/2019/08/12/%E8%A7%86%E9%A2%91%E6%8F%90%E5%8F%96%E9%9F%B3%E9%A2%91%E5%92%8C%E9%9F%B3%E9%A2%91%E8%A3%81%E5%89%AA/"/>
    <id>https://www.liyb.vip/2019/08/12/视频提取音频和音频裁剪/</id>
    <published>2019-08-12T10:47:29.807Z</published>
    <updated>2019-08-16T05:14:19.783Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中需要从视频中提取音频，并需要根据音频时间间隔进行裁剪，所以在此记录下实现过程。</p><h1 id="音频提取"><a href="#音频提取" class="headerlink" title="音频提取"></a>音频提取</h1><p>音频提取原理是通过创建只包含原始文件的音频音轨并使用 <code>AVAssetExportSession</code>导出组合文件的<code>AVMutableComposition</code> 来完成音频提取。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出路径</span></span><br><span class="line"><span class="comment">self.cachePath: 获取缓存路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">NSString</span> *outPath = [<span class="keyword">self</span>.cachePath stringByAppendingPathComponent: [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@.m4a"</span>, name]];</span><br><span class="line"><span class="comment">// 创建组合文件</span></span><br><span class="line"><span class="built_in">AVMutableComposition</span> *composition = [[<span class="built_in">AVMutableComposition</span> alloc] init];</span><br><span class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> fileURLWithPath:path];</span><br><span class="line"><span class="built_in">AVURLAsset</span> *asset = [[<span class="built_in">AVURLAsset</span> alloc] initWithURL:url options:<span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">AVAssetTrack</span> *track = [asset tracksWithMediaType:<span class="built_in">AVMediaTypeAudio</span>].firstObject;</span><br><span class="line"><span class="built_in">AVMutableCompositionTrack</span> *comTrack = [composition addMutableTrackWithMediaType:<span class="built_in">AVMediaTypeAudio</span> preferredTrackID:kCMPersistentTrackID_Invalid];</span><br><span class="line"><span class="built_in">NSError</span> *error;</span><br><span class="line">[comTrack insertTimeRange:track.timeRange ofTrack:track atTime:kCMTimeZero error:&amp;error];</span><br><span class="line"><span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"创建失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建只包含原始文件的音频音轨</span></span><br><span class="line"><span class="built_in">AVAssetExportSession</span> *session = [[<span class="built_in">AVAssetExportSession</span> alloc] initWithAsset:composition presetName:<span class="built_in">AVAssetExportPresetPassthrough</span>];</span><br><span class="line"><span class="comment">// 导出文件类型.m4a格式</span></span><br><span class="line">session.outputFileType = <span class="built_in">AVFileTypeAppleM4A</span>;</span><br><span class="line">session.outputURL = [<span class="built_in">NSURL</span> fileURLWithPath:outPath];</span><br><span class="line"><span class="comment">// 音频导出</span></span><br><span class="line">[session exportAsynchronouslyWithCompletionHandler:^&#123;</span><br><span class="line">    <span class="built_in">AVAssetExportSessionStatus</span> status = session.status;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">AVAssetExportSessionStatusCompleted</span> == status) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"音频导出成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"音频导出失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h1 id="音频裁剪"><a href="#音频裁剪" class="headerlink" title="音频裁剪"></a>音频裁剪</h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">根据时间间隔裁剪音频</span></span><br><span class="line"><span class="comment">path: 音频路径</span></span><br><span class="line"><span class="comment">time: 时间间隔</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">- (<span class="keyword">void</span>)cutAudioWithPath:(<span class="built_in">NSString</span> *)path intervalTime:(<span class="built_in">NSInteger</span>)time &#123;</span><br><span class="line"><span class="comment">// 获取音频时长</span></span><br><span class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> fileURLWithPath:path];</span><br><span class="line"><span class="built_in">AVURLAsset</span>*audioAsset = [<span class="built_in">AVURLAsset</span> URLAssetWithURL:url options:<span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">CMTime</span> totalDuration = audioAsset.duration;</span><br><span class="line"><span class="built_in">CGFloat</span> audioSeconds = <span class="built_in">CMTimeGetSeconds</span>(totalDuration);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (audioSeconds &gt; time) &#123;</span><br><span class="line">    <span class="built_in">NSInteger</span> number = ceil(audioSeconds / time);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> idx = <span class="number">0</span>; idx &lt; number; idx ++) &#123;</span><br><span class="line">        <span class="built_in">NSInteger</span> t = idx * time;</span><br><span class="line">        <span class="built_in">CMTime</span> startTime = <span class="built_in">CMTimeMake</span>(t, <span class="number">1</span>);;</span><br><span class="line">        <span class="built_in">CMTime</span> endTime;</span><br><span class="line">        <span class="keyword">if</span> (t &gt; audioSeconds) &#123;</span><br><span class="line">            endTime = <span class="built_in">CMTimeMake</span>(audioSeconds, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            endTime = <span class="built_in">CMTimeMake</span>(time, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSString</span> *fileName = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%zi.m4a"</span>, t];</span><br><span class="line">        <span class="built_in">NSString</span> *outPutPath = [[<span class="keyword">self</span> composeDir] stringByAppendingPathComponent:fileName];</span><br><span class="line">        <span class="built_in">NSURL</span> *audioFileOutput = [<span class="built_in">NSURL</span> fileURLWithPath:outPutPath];</span><br><span class="line">        [[<span class="built_in">NSFileManager</span> defaultManager] removeItemAtURL:audioFileOutput error:<span class="literal">NULL</span>];</span><br><span class="line">        <span class="built_in">AVAsset</span> *asset = [<span class="built_in">AVAsset</span> assetWithURL:url];</span><br><span class="line">        <span class="built_in">AVAssetExportSession</span> *exportSession = [<span class="built_in">AVAssetExportSession</span> exportSessionWithAsset:asset presetName:<span class="built_in">AVAssetExportPresetAppleM4A</span>];</span><br><span class="line">        <span class="built_in">CMTimeRange</span> exportTimeRange = <span class="built_in">CMTimeRangeFromTimeToTime</span>(startTime, endTime);</span><br><span class="line">        </span><br><span class="line">        exportSession.outputURL = audioFileOutput;</span><br><span class="line">        exportSession.outputFileType = <span class="built_in">AVFileTypeAppleM4A</span>;</span><br><span class="line">        exportSession.timeRange = exportTimeRange;</span><br><span class="line">        </span><br><span class="line">        [exportSession exportAsynchronouslyWithCompletionHandler:^&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">AVAssetExportSessionStatusCompleted</span> == exportSession.status) &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"导出完成: %@"</span>, outPutPath);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">AVAssetExportSessionStatusFailed</span> == exportSession.status) &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"导出失败: %@"</span>, exportSession.error.localizedDescription);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"音频时长小于裁剪时间间隔"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近项目中需要从视频中提取音频，并需要根据音频时间间隔进行裁剪，所以在此记录下实现过程。&lt;/p&gt;
&lt;h1 id=&quot;音频提取&quot;&gt;&lt;a href=&quot;#音频提取&quot; class=&quot;headerlink&quot; title=&quot;音频提取&quot;&gt;&lt;/a&gt;音频提取&lt;/h1&gt;&lt;p&gt;音频提取原理是通过创
      
    
    </summary>
    
      <category term="iOS" scheme="https://www.liyb.vip/categories/iOS/"/>
    
    
      <category term="音视频" scheme="https://www.liyb.vip/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS逆向学习(一)-环境搭建</title>
    <link href="https://www.liyb.vip/2019/08/11/iOS%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0(%E4%B8%80)-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://www.liyb.vip/2019/08/11/iOS逆向学习(一)-环境搭建/</id>
    <published>2019-08-11T08:08:53.720Z</published>
    <updated>2019-08-15T10:39:51.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ul><li>越狱手机</li></ul><p>如果没有越狱后面的操作无法实现，如何越狱，这里我们就不讲了，网上教程很多。</p><h1 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h1><p>SSH是Secure Shell简称， 是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH通过在网络中创建安全隧道来实现SSH客户端与服务器之间的连接。</p><p>配置SSH是我们后续工作的基础，我们可以通过SSH实现PC端访问iPhone手机。</p><h2 id="安装所需APP"><a href="#安装所需APP" class="headerlink" title="安装所需APP"></a>安装所需APP</h2><h3 id="卸载OpenSSH与OpenSSL"><a href="#卸载OpenSSH与OpenSSL" class="headerlink" title="卸载OpenSSH与OpenSSL"></a>卸载OpenSSH与OpenSSL</h3><p>iOS 10以后越狱自带SSH,但是无法连接iPhone或报错,所以需要首先卸载OpenSSH与OpenSSL。在Cydia中搜索OpenSSH与OpenSSL,然后卸载。</p><h3 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h3><p>自带源没有Dropbear，所以需要添加新源，这里我提供一个源: <code>http://apt.abcydia.com</code>,也可以自己搜索其他源。</p><h3 id="安装Dropbear"><a href="#安装Dropbear" class="headerlink" title="安装Dropbear"></a>安装Dropbear</h3><p>搜索Dropbear并安装。</p><h3 id="安装MTerminal"><a href="#安装MTerminal" class="headerlink" title="安装MTerminal"></a>安装MTerminal</h3><p>搜索MTerminal并安装。</p><h1 id="连接iPhone"><a href="#连接iPhone" class="headerlink" title="连接iPhone"></a>连接iPhone</h1><h2 id="WIFI连接"><a href="#WIFI连接" class="headerlink" title="WIFI连接"></a>WIFI连接</h2><h3 id="前提-1"><a href="#前提-1" class="headerlink" title="前提"></a>前提</h3><ul><li>PC与iPhone在同一局域网</li></ul><p>打开MTerminal，输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure><p>输入root密码，默认为<code>alpine</code>,然后执行以下命令，查看dropbear进程是否执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep dropbear</span><br></pre></td></tr></table></figure><p>如果没有<code>dropbear</code>进程，执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/dropbear -F -R -p 22</span><br></pre></td></tr></table></figure><p>然后获取iPhone所在网络下的ip地址,PC终端执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 172.20.122.108 iPhone ip地址</span><br><span class="line">ssh root@172.20.122.108</span><br></pre></td></tr></table></figure><p>如果有以下提示</p><pre><code>The authenticity of host &apos;192.168.1.105 (192.168.1.105)&apos; can&apos;t be established.ECDSA key fingerprint is SHA256:ANF7Cvc1yM/ZdaHyz9V1EHjG115cylIcHWyOzCL+kzs.Are you sure you want to continue connecting (yes/no)?</code></pre><p>输入<code>yes</code>即可,然后输入root密码，默认密码<code>alpine</code></p><h2 id="USB连接"><a href="#USB连接" class="headerlink" title="USB连接"></a>USB连接</h2><p>有时候网络不稳定的时候，使用WIFI连接响应可能会很慢，所以这里讲下比WIFI连接响应更快的USB连接。</p><h3 id="安装usbmuxd"><a href="#安装usbmuxd" class="headerlink" title="安装usbmuxd"></a>安装usbmuxd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install usbmuxd</span><br></pre></td></tr></table></figure><p>安装成功后,执行以下命令连接iPhone</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 把iPhone的默认端口22映射到PC 2222端口上面</span><br><span class="line">iproxy 2222 22</span><br></pre></td></tr></table></figure><p>执行完后，会一直显示<code>waiting for connection</code>，此时不要慌，再打开一个终端窗口,执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 2222 root@localhost</span><br><span class="line">// 或</span><br><span class="line">ssh -p 2222 root@127.0.0.1</span><br></pre></td></tr></table></figure><p>如果连接失败，请查看数据线是否连接正常;连接成功后就可以尽情访问iPhone里面数据了。</p><h1 id="修改SSH密码"><a href="#修改SSH密码" class="headerlink" title="修改SSH密码"></a>修改SSH密码</h1><h2 id="ROOT密码"><a href="#ROOT密码" class="headerlink" title="ROOT密码"></a>ROOT密码</h2><p>1.首先使用root权限连接iPhone</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure><p>2.执行下面命令，修改密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p>3.按提示输入两次新密码即可。<br>4.<code>exit</code>命令退出连接。</p><h2 id="mobile密码"><a href="#mobile密码" class="headerlink" title="mobile密码"></a>mobile密码</h2><p>1.首先使用mobile权限连接iPhone</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh mobile@xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure><p>2.执行下面命令，修改密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p>3.按提示输入两次新密码即可。<br>4.<code>exit</code>命令退出连接。</p><h1 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h1><p>首先查看<code>.ssh</code>目录下是否存在<code>id_rsa</code>和<code>id_rsa.pub</code>，如果已存在，无需再次生成。</p><h2 id="生成RSA公私钥"><a href="#生成RSA公私钥" class="headerlink" title="生成RSA公私钥"></a>生成RSA公私钥</h2><p>终端执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>查看<code>.ssh</code>目录下是否生成了<code>id_rsa</code>和<code>id_rsa.pub</code>文件。</p><h2 id="推送公钥到iPhone"><a href="#推送公钥到iPhone" class="headerlink" title="推送公钥到iPhone"></a>推送公钥到iPhone</h2><p>连接iPhone，执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 2222 iPhone的默认端口22映射PC端的端口号</span><br><span class="line">ssh-copy-id root@localhost -p 2222</span><br></pre></td></tr></table></figure><p>输入密码，如果已修改，输入修改后的密码,未修改输入默认密码<code>alpine</code>。</p><p>接下来再次登录就会发线不用输入密码了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;越狱手机&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果没有越狱后面的操作无法实现，如何越狱，这里我们就不讲了，网上教程很多。&lt;/p&gt;
&lt;h1
      
    
    </summary>
    
      <category term="iOS" scheme="https://www.liyb.vip/categories/iOS/"/>
    
    
      <category term="逆向" scheme="https://www.liyb.vip/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="https://www.liyb.vip/2019/05/07/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>https://www.liyb.vip/2019/05/07/Hexo博客搭建/</id>
    <published>2019-05-07T10:45:07.636Z</published>
    <updated>2019-09-09T06:28:34.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h1><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>安装前提</p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>如果已经安装以上两项，可以直接安装hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>初始化Hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd &lt;存放博客的路径&gt;</span><br><span class="line"><span class="meta">$</span> hexo init &lt;博客名&gt;</span><br><span class="line"><span class="meta">$</span> cd &lt;博客名&gt;</span><br><span class="line"><span class="meta">$</span> npm install</span><br></pre></td></tr></table></figure><p>创建完成,目录结构如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml// 配置文件</span><br><span class="line">├── package.json// 应用程序的信息</span><br><span class="line">├── scaffolds// 模版 文件夹</span><br><span class="line">├── source// 资源文件夹</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts// 文章</span><br><span class="line">└── themes// 主题</span><br></pre></td></tr></table></figure><p>启动服务，查看效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo server // 或 hexo s</span><br></pre></td></tr></table></figure><p>浏览器访问:<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><h2 id="Github关联"><a href="#Github关联" class="headerlink" title="Github关联"></a>Github关联</h2><p>创建仓库，命名规则 <code>&lt;账户名&gt;.github.io</code></p><p>修改_config.yml配置文件，末尾修改为以下内容<font color="red">(注意:“:”后面有一个空格)</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repository: https://github.com/xxx/xxx.github.io.git// 刚才创建仓库git链接</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p>推送到github仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo g// 生成html静态文件</span><br><span class="line"><span class="meta">$</span> hexo d// push到github</span><br></pre></td></tr></table></figure><p>然后浏览器访问 <code>https://&lt;账户名&gt;.github.io</code>，即可查看博客</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>购买域名:<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">阿里云万网</a>、<a href="https://dnspod.cloud.tencent.com/" target="_blank" rel="noopener">腾讯云</a>等</p><p>域名解析照下图添加即可</p><p><img src="/resource/hexo/域名解析.png" alt></p><p>打开博客仓库</p><p><img src="/resource/hexo/仓库设置.png" alt><br><img src="/resource/hexo/仓库设置_2.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;博客搭建&quot;&gt;&lt;a href=&quot;#博客搭建&quot; class=&quot;headerlink&quot; title=&quot;博客搭建&quot;&gt;&lt;/a&gt;博客搭建&lt;/h1&gt;&lt;h2 id=&quot;Hexo安装&quot;&gt;&lt;a href=&quot;#Hexo安装&quot; class=&quot;headerlink&quot; title=&quot;Hexo安
      
    
    </summary>
    
      <category term="Hexo" scheme="https://www.liyb.vip/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="https://www.liyb.vip/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 10.14.x安装旧版iTunes</title>
    <link href="https://www.liyb.vip/2019/04/17/MacOS%2010.14.x%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88iTunes/"/>
    <id>https://www.liyb.vip/2019/04/17/MacOS 10.14.x安装旧版iTunes/</id>
    <published>2019-04-17T03:09:54.286Z</published>
    <updated>2019-09-09T06:20:01.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iTunes12-6-x下载地址"><a href="#iTunes12-6-x下载地址" class="headerlink" title="iTunes12.6.x下载地址"></a>iTunes12.6.x下载地址</h1><p><a href="https://support.apple.com/zh-cn/HT208079" target="_blank" rel="noopener">iTunes12.6.x</a></p><h1 id="关闭sip系统完整性保护"><a href="#关闭sip系统完整性保护" class="headerlink" title="关闭sip系统完整性保护"></a>关闭sip系统完整性保护</h1><p>打开Mac终端输入命令查看sip状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrutil status</span><br></pre></td></tr></table></figure><p>如果是disabled直接跳过关闭sip步骤,如果是enabled执行下一步</p><p><img src="/resource/iTunes/1.png" alt></p><p>重启电脑,按住cmmand+r直到显示苹果图标时松开，进入修复模式。</p><p>点击顶部导航栏实用工具,选择终端。</p><p>终端中输入命令关闭sip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrutil disable</span><br></pre></td></tr></table></figure><p>重启电脑.</p><h1 id="执行脚本安装旧版iTunes"><a href="#执行脚本安装旧版iTunes" class="headerlink" title="执行脚本安装旧版iTunes"></a>执行脚本安装旧版iTunes</h1><p>1.打开LaunchPad找到脚本编辑器，粘贴下面脚本代码,点击运行按照提示选择12.6.x版本iTunes安装即可.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">set question to display dialog "Delete iTtunes?" buttons &#123;"Yes", "No"&#125; default button 1</span><br><span class="line">set answer to button returned of question</span><br><span class="line">if answer is equal to "Yes" then</span><br><span class="line">    do shell script "rm -rf /Applications/iTunes.app" with administrator privileges</span><br><span class="line">    display dialog "iTunes was deleted" buttons &#123;"Ok"&#125;</span><br><span class="line">    set theDMG to choose file with prompt "Please select iTunes 12.6 dmg file:" of type &#123;"dmg"&#125;</span><br><span class="line">    do shell script "hdiutil mount " &amp; quoted form of POSIX path of theDMG</span><br><span class="line">    do shell script "pkgutil --expand /Volumes/iTunes/Install\\ iTunes.pkg ~/tmp"</span><br><span class="line">    do shell script "sed -i '' 's/18A1/14F2511/g' ~/tmp/Distribution"</span><br><span class="line">    do shell script "sed -i '' 's/gt/lt/g' ~/tmp/Distribution"</span><br><span class="line">    do shell script "pkgutil --flatten ~/tmp ~/Desktop/iTunes.pkg"</span><br><span class="line">    do shell script "hdiutil unmount /Volumes/iTunes/"</span><br><span class="line">    do shell script "rm -rf ~/tmp"</span><br><span class="line">end if</span><br><span class="line">if answer is equal to "No" then</span><br><span class="line">    display dialog "iTunes was not deleted" buttons &#123;"Ok"&#125;</span><br><span class="line">    return</span><br><span class="line">end if</span><br><span class="line"></span><br><span class="line">set question to display dialog "Install iTtunes?" buttons &#123;"Yes", "No"&#125; default button 1</span><br><span class="line">set answer to button returned of question</span><br><span class="line">if answer is equal to "Yes" then</span><br><span class="line">    do shell script "open ~/Desktop/iTunes.pkg"</span><br><span class="line">    return</span><br><span class="line">end if</span><br><span class="line">if answer is equal to "No" then</span><br><span class="line">    display dialog "Modified iTunes.pkg saved on desktop" buttons &#123;"Ok"&#125;</span><br><span class="line">    return</span><br><span class="line">end if</span><br></pre></td></tr></table></figure><p>运行时如果提示 iTunes Library.itl错误,终端运行命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm ~/Music/iTunes/iTunes\ Library.itl</span><br></pre></td></tr></table></figure></p><p>安装完成重启电脑进入修复模式，终端中输入命令开启sip<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrutil enable</span><br></pre></td></tr></table></figure></p><h1 id="MacOS-10-14-4无法打开问题解决"><a href="#MacOS-10-14-4无法打开问题解决" class="headerlink" title="MacOS 10.14.4无法打开问题解决"></a>MacOS 10.14.4无法打开问题解决</h1><p>点击iTunes提示“应用程序“iTunes”的这个版本不能与此版本的 macOS 配合使用。您使用的是“iTunes”12.6.x”</p><p>解决办法：在运行上面的脚本之前，复制「访达」—「应用程序」—「iTunes.app」—「显示包内容」中的version.plist和Info.plist两个文件并保存备用。安装好旧版本的itunes之后，将这两个文件覆盖掉旧版本相对应的两个旧版文件即可运行。</p><p>如果你已经删除新版itunes并无法重新安装，也可以点击此处下载<a href="/resource/iTunes/version.plist">version.plist</a>,<a href="/resource/iTunes/Info.plist">info.plist</a>两个文件。</p><p>美中不足的是貌似图标还是禁止的样子</p><p>解决办法:</p><ol><li>复制「访达」—「应用程序」—「iTunes.app」—「显示包内容」- 「Contents」-「Resources」中的iTunes.icns。</li><li>「访达」—「应用程序」—「iTunes.app」显示简介,拖拽iTunes.icns文件至简介顶部iTunes图标除替换即可。<br><img src="/resource/iTunes/2.png" alt></li></ol><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://juejin.im/post/5c3c62176fb9a049c965ec01" target="_blank" rel="noopener">macOS 10.14 mojave安装低版本iTunes 12.6.x</a></p><p><a href="https://www.newlearner.site/2019/02/18/mac-itunes-downgrade.html#10144" target="_blank" rel="noopener">macOS Mojave安装iTunes 12.6.x</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;iTunes12-6-x下载地址&quot;&gt;&lt;a href=&quot;#iTunes12-6-x下载地址&quot; class=&quot;headerlink&quot; title=&quot;iTunes12.6.x下载地址&quot;&gt;&lt;/a&gt;iTunes12.6.x下载地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https
      
    
    </summary>
    
      <category term="MacOS" scheme="https://www.liyb.vip/categories/MacOS/"/>
    
    
      <category term="iTunes" scheme="https://www.liyb.vip/tags/iTunes/"/>
    
  </entry>
  
  <entry>
    <title>给自己git项目添加pod支持</title>
    <link href="https://www.liyb.vip/2018/11/27/%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84Git%E4%BB%93%E5%BA%93%E6%B7%BB%E5%8A%A0pod%E6%94%AF%E6%8C%81/"/>
    <id>https://www.liyb.vip/2018/11/27/给自己的Git仓库添加pod支持/</id>
    <published>2018-11-27T07:39:08.940Z</published>
    <updated>2020-11-17T05:09:31.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h1><ol><li>进<a href="https://github.com/" target="_blank" rel="noopener">github</a>，登录自己账号。如果没有自行注册。</li><li>创建个新仓库<br><img src="/resource/pod/create.png" alt="创建仓库"> </li><li>把项目clone到本地</li><li>把自己需要添加pod支持的库添加进刚才clone的项目中</li></ol><h1 id="添加pod支持"><a href="#添加pod支持" class="headerlink" title="添加pod支持"></a>添加pod支持</h1><h2 id="创建podspec文件"><a href="#创建podspec文件" class="headerlink" title="创建podspec文件"></a>创建podspec文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd 刚才clone的项目路径</span><br><span class="line"><span class="meta">$</span> pod spec create 发布的名</span><br></pre></td></tr></table></figure><h2 id="编辑podspec文件"><a href="#编辑podspec文件" class="headerlink" title="编辑podspec文件"></a>编辑podspec文件</h2><p><img src="/resource/pod/podspec.png" alt="编辑podspec"></p><h2 id="设置release版本"><a href="#设置release版本" class="headerlink" title="设置release版本"></a>设置release版本</h2><p>首先上传本地仓库至github</p><p><img src="/resource/pod/release.png" alt></p><p>点击release，此处我以添加过，所以显示为1</p><p><img src="/resource/pod/version.png" alt></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pod lib lint podspec文件名.podspec</span><br></pre></td></tr></table></figure><p>结果多种多样根据错误提示进行修改podspec文件，如果没有错误只有警告，可以使用下面的命令进行忽略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pod lib lint podspec文件名.podspec —allow-warnings</span><br></pre></td></tr></table></figure><p>看到 xxx passed validation 说明成功</p><h2 id="注册Cocoapods账号"><a href="#注册Cocoapods账号" class="headerlink" title="注册Cocoapods账号"></a>注册Cocoapods账号</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pod trunk register 邮箱地址 '用户名'  —description='描述信息'</span><br></pre></td></tr></table></figure><p>注: 用户名和描述信息带引号,之后进入邮箱进行验证就可以了</p><h2 id="上传代码到Cocoapods"><a href="#上传代码到Cocoapods" class="headerlink" title="上传代码到Cocoapods"></a>上传代码到Cocoapods</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pod trunk push podspec文件路径</span><br></pre></td></tr></table></figure><p>成功后可以使用pod search进行查看<br>如果pod search搜不到，可以进入此文件夹下<code>~/Library/Caches/CocoaPods/</code>删除<code>search_index.json</code>文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;创建git仓库&quot;&gt;&lt;a href=&quot;#创建git仓库&quot; class=&quot;headerlink&quot; title=&quot;创建git仓库&quot;&gt;&lt;/a&gt;创建git仓库&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;进&lt;a href=&quot;https://github.com/&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="iOS" scheme="https://www.liyb.vip/categories/iOS/"/>
    
    
      <category term="cocoapods" scheme="https://www.liyb.vip/tags/cocoapods/"/>
    
  </entry>
  
  <entry>
    <title>Protocal Buffers for iOS的安装及使用(使用篇)</title>
    <link href="https://www.liyb.vip/2018/11/27/Protocal%20Buffers%20for%20iOS%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8(%E4%BD%BF%E7%94%A8%E7%AF%87)/"/>
    <id>https://www.liyb.vip/2018/11/27/Protocal Buffers for iOS的安装及使用(使用篇)/</id>
    <published>2018-11-27T07:39:08.939Z</published>
    <updated>2019-09-09T06:15:46.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><ul><li><p>1.从<a href="https://github.com/google/protobuf.git" target="_blank" rel="noopener">https://github.com/google/protobuf.git</a>下载源码，解压，里面有支持不同语言的版本源码，我们只需要里面的支持objc的文件夹名为：<code>objectivec</code></p><p>  <img src="/resource/ProtocalBuffers/1-1.png" alt="1-1"></p></li><li><p>2.新建一个工程命名为<code>ProtocolBufferTest</code>，创建一个文件夹，假设命名为：<code>protocolbuf</code>， 把第一步的pb源码复制到此文件夹中：</p><p>  <img src="/resource/ProtocalBuffers/2-1.png" alt="2-1"></p></li><li><p>3.使用Xcode打开工程，点击左下角<code>+</code>， 引用<code>protocolBuffer</code>源文件到工程中<br>(源文件里面有两个工程配置文件：<code>ProtocolBuffers_iOS.xcodeproj</code>和<code>ProtocolBuffers_OSX.xcodeproj</code>，引用<code>ProtocolBuffers_iOS.xcodeproj</code>就好)</p><p>  <img src="/resource/ProtocalBuffers/3-1.png" alt="3-1"><br>  <img src="/resource/ProtocalBuffers/3-2.png" alt="3-2"></p></li><li><p>4.选中工程: <code>targets</code>—&gt;<code>Build Phases</code>—&gt;<code>Link Binary With Libraries</code>， 引用源码静态库文件：<code>libProtocolBuffers.a</code></p><p>  <img src="/resource/ProtocalBuffers/4-1.png" alt="4-1"></p></li><li><p>5.在工程设置搜索静态库的头文件（pb文件在protocolbuf文件夹里面）:<br><code>targets</code>—&gt;<code>Build Setting</code>—&gt;<code>Search Paths</code>—&gt;<code>Header Search Paths</code>, 写入：<code>$(PROJECT)/protocolbuf</code></p><p>   <img src="/resource/ProtocalBuffers/5-1.png" alt="5-1"></p></li><li><p>6.编写测试文件<code>*.proto</code>，比如新建一个文件<code>Person.proto</code>, 按照官方标准语法<code>https://developers.google.com/protocol-buffers/</code> 编写通用代码，写好后在终端进入该<code>Person.proto</code>文件所在目录，使用protoc命令：<code>protoc *.proto --objc_out=../Pro_out</code> 进行编译。把<code>Person.proto</code>文件编译成<code>Person.pbobjc.h</code>和<code>Person.pbobjc.m</code>, 生成的文件在<code>Pro_out</code>文件夹里面。如果<code>Person.proto</code>源文件有语法问题，编译时会报错；当编译时什么提示都没有，表示编译成功：将编译好的<code>*.pbobjc.h</code>和<code>*.pbobjc.m</code>拖入工程中，因为不支持arc, 所以需要在<code>*.pbobjc.m</code>设置<code>-fno-objc-arc</code>, 然后就可以使用了</p><p>   <img src="/resource/ProtocalBuffers/6-1.png" alt="6-1"><br>   <img src="/resource/ProtocalBuffers/6-2.png" alt="6-2"><br>   <img src="/resource/ProtocalBuffers/6-3.png" alt="6-3"><br>   <img src="/resource/ProtocalBuffers/6-4.png" alt="6-4"></p></li><li><p>7.序列化与反序列化</p></li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Person *p = [[Person alloc] init];</span><br><span class="line">p.name = <span class="string">@"xiao"</span>;</span><br><span class="line">p.age = <span class="number">2</span>;</span><br><span class="line">p.address = <span class="string">@"哈哈哈"</span>;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"name:%@, age:%zi, address:%@"</span>, p.name, p.age, p.address);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//序列化</span></span><br><span class="line"><span class="built_in">NSData</span> *data = [p data];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"data:%@"</span>, data);</span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化    </span></span><br><span class="line"><span class="built_in">NSError</span> *error;</span><br><span class="line">Person *per = [Person parseFromData:data error:&amp;error];</span><br><span class="line"><span class="keyword">if</span> (!error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"_____name:%@, age:%zi, address:%@_____"</span>, per.name, per.age, per.address);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;h2 id=&quot;下载源码&quot;&gt;&lt;a href=&quot;#下载源码&quot; class=&quot;headerlink&quot; title=&quot;下载源码&quot;&gt;&lt;/a&gt;下载源码&lt;/h
      
    
    </summary>
    
      <category term="iOS" scheme="https://www.liyb.vip/categories/iOS/"/>
    
    
      <category term="ProtocalBuffers" scheme="https://www.liyb.vip/tags/ProtocalBuffers/"/>
    
  </entry>
  
  <entry>
    <title>Protocal Buffers for iOS的安装及使用(安装篇)</title>
    <link href="https://www.liyb.vip/2018/11/27/Protocl%20Buffers%20for%20iOS%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8(%E5%AE%89%E8%A3%85%E7%AF%87)/"/>
    <id>https://www.liyb.vip/2018/11/27/Protocl Buffers for iOS安装及使用(安装篇)/</id>
    <published>2018-11-27T07:39:08.939Z</published>
    <updated>2019-08-12T10:18:08.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装Protocal-Buffers"><a href="#安装Protocal-Buffers" class="headerlink" title="安装Protocal Buffers"></a>安装Protocal Buffers</h2><p>终端执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew -v</span><br></pre></td></tr></table></figure><p>这条命令是查看你的mac里面有没有装brew。brew是mac os里面，类似于ubuntu的apt-get的功能，都可以直接在终端输入命令然后安装程序。－v自然就是版本version的意思</p><p>下载brew安装环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e $(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span><br></pre></td></tr></table></figure><p>分别执行下面三条命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install automake</span><br><span class="line">brew install libtool</span><br><span class="line">brew install protobuf</span><br></pre></td></tr></table></figure><p>就是利用brew下载安装了。protobuf就是我们想要的，另外两个是依赖库</p><h2 id="clone-Protocal-Buffers库"><a href="#clone-Protocal-Buffers库" class="headerlink" title="clone Protocal Buffers库"></a>clone Protocal Buffers库</h2><p>执行下列命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/alexeyxo/protobuf-objc.git</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure><p>从github下载protobuf－objc这个工程，build脚本里面做的是编译</p><p>注意：编译工程过程中，有可能会出现错误。别慌！看编译错误的提示。一般错误只是因为环境变量和路径没有配置好，少了一些东西，例如少了编译protobuf这个工程的依赖库，按照提示添加路径即可。有了工程以后，我们就可以开始测试一下怎么用protobuf了</p><h2 id="导入工程"><a href="#导入工程" class="headerlink" title="导入工程"></a>导入工程</h2><p>打开Xcode！新建一个工程！ 然后有两个方法把protobuf添加到你的工程里面，一个是直接添加，一个是利用cocoapod 强烈推荐后者，因为cocoapods能够很方便的管理第三方类库，以后人家的工程升级了，你只需要一行 pod update 就ok了。关于安装和使用cocoapod，属于另一个话题，在Podfile添加下面这个句子</p><pre><code>platform :ios , 8.0pod ProtocolBuffers,</code></pre><p>在保存之后，到终端，cd到工程里面，</p><pre><code>pod install</code></pre><p>等一会，cocoapod就会帮我们添加好，以后我们就应该打开 project的workspace，因为添加了pod作为子工程。</p><h2 id="创建Protocal-Buffers文件"><a href="#创建Protocal-Buffers文件" class="headerlink" title="创建Protocal Buffers文件"></a>创建Protocal Buffers文件</h2><p>在你的工程里面，新建一个文件夹，假如命名叫Protobuf 在这个文件夹里面新建一个proto文件。例如要在本地储存用户信息，那么就新建一个user.proto 里面内容可以如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto2&quot;;// Protocal Buffers版本</span><br><span class="line">message PBUser &#123;</span><br><span class="line">required string userId = 1;         // 用户ID</span><br><span class="line">optional string nick = 2;            // 用户昵称</span><br><span class="line">optional string avatar = 3;        // 用户头像</span><br><span class="line">optional string password = 7;</span><br><span class="line">optional string email = 8;</span><br><span class="line">optional string mobile = 9;         // 手机号码</span><br><span class="line">optional string qqOpenId = 10;    // QQ ID</span><br><span class="line">optional string sinaId = 11;         // SINA UserID</span><br><span class="line">optional string weixinId = 12;     // WeChat UserID</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个例子包括了几个要素。 一个是包名。包的概念在object c里面没有，java里面有，c++里面namespace也是差不多意思。 顺便提一下，oc里面一般在库名前面添加两个字母，起的作用差不多就是包的作用，作为类的上一层组织结构。 例如官方的NS，例如AFNetworking这种第三方类库的AF。</p><p>回到正题。编写pb文件，第二个要素是message 一个message就是一个整体，里面有哪些必要的内容，哪些可选的内容。详细的proto语法随便一找一大把，就不啰嗦了。</p><h2 id="Protocal-Buffers文件转换"><a href="#Protocal-Buffers文件转换" class="headerlink" title="Protocal Buffers文件转换"></a>Protocal Buffers文件转换</h2><p>写好了proto，接下来就是编译这个proto文件，protobuf－objc这个类库会编译声称一些源码，是读写proto数据的接口API。 编译命令如下： 先打开工程，建议单独新建一个文件夹作为输出路径，例如工程下新建文件夹Gen，用来放generate出来的.pb.h文件&amp;&amp;.pb.m文件 打开终端 cd到工程路径下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --plugin=/usr/local/bin/protoc-gen-objc person.proto --objc_out=./Gen</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&quot;安装Protocal-Buffers&quot;&gt;&lt;a href=&quot;#安装Protocal-Buffers&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="iOS" scheme="https://www.liyb.vip/categories/iOS/"/>
    
    
      <category term="ProtocalBuffers" scheme="https://www.liyb.vip/tags/ProtocalBuffers/"/>
    
  </entry>
  
</feed>
